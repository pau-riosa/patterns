defmodule Fibonacci do
  @moduledoc """
  Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
  By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  """

  @doc """
  reference: http://stratus3d.com/blog/2018/08/18/fibonacci-algorithms-in-elixir/
  """
  def fibonacci(number) do
    number
    |> fibonacci_do()
    |> Enum.reverse()
  end

  def fibonacci_do(1), do: [1]
  def fibonacci_do(2), do: [2 | fibonacci_do(1)]

  def fibonacci_do(number) when number > 2 do
    [x, y | _] = all = fibonacci_do(number - 1)
    [x + y | all]
  end

  def fibonacci_nth_term(number) do
    number
    |> fibonacci
    |> List.last()
  end

  @doc """

  By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
  find the sum of the even-valued terms.
  """
  def sum_of_even_fibonnaci(number) do
    number
    |> even_fibonacci
    |> Enum.sum()
  end

  def even_fibonacci(number) do
    number
    |> even_fibonacci_do()
    |> Enum.reverse()
    |> Enum.filter(fn integer ->
      integer <= number and rem(integer, 2) == 0
    end)
  end

  def even_fibonacci_do(1), do: [1]
  def even_fibonacci_do(2), do: [2 | fibonacci_do(1)]

  def even_fibonacci_do(number) when number > 2 do
    [x, y | _] = all = even_fibonacci_do(number - 1)

    sum = x + y

    if sum <= number do
      [sum | all]
    else
      all
    end
  end
end
